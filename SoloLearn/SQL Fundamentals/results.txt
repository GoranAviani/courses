Rearrange to select all student names and university names (use left join to show all student names).
SELECT students.names, universities.names
FROM students
LEFT OUTER JOIN universities
ON students.university_id=universities.id



Drag and drop from the options below to insert a data item into the ''people'' table.
INSERT INTO people
VALUES ('John Smith', '1', 22);


Drag and drop from the options below to update the ''people'' table.
UPDATE people
SET name='Jordan' 
WHERE id=147;


Fill in the blanks to create a table with two columns: ''id'' as a primary key integer, and ''name'' of type varchar.
CREATE TABLE(
 Id int ,
 Name varchar (30),
 PRIMARY KEY (id));

Rearrange to remove the column ''age'' from the ''people'' table.
ALTER TABLE
people
DROP COLUMN
age


Which choice is the correct command for changing the name of a table?
RENAME


Drag and drop from the options below to create a view named ''most_abs'' for the students with the greatest number of absences.
CREATE VIEW most_abs AS
SELECT id, name, absences
FROM students 
ORDER BY absences DESC 
LIMIT 10;


Drag and drop from the options below to delete the table ''students'' from the database.
DROP TABLE students


Drag and drop from the options below to remove the column ''temp'' from the table ''students''.
ALTER TABLE students
DROP COLUMN temp

CHALLENGE 1

In the "users" table of website logins and passwords, select the first 10 records in the table.
SELECT * FROM users
LIMIT 10


Drag and drop from the options below to create the table "users" to store website user logins and passwords.
CREATE TABLE users (
id INT NOT NULL AUTO_INCREMENT,
login VARCHAR (100),
password VARCHAR(100) )


Rearrange the query to select all students under age 21. The result should be sorted according to the students' names.
SELECT *
FROM students
WHERE age < 21
ORDER BY name

Your boss asks you to print the list of the first one hundred customers who have balances greater than $1000 or who are from NY.
SELECT * FROM customers
WHERE balance > 1000 
OR city = 'NY'
LIMIT 100

You need the ages of all bears and lions. The first query shows the ages of bears and birds from zoo1, the other shows the ages of lions and crocodiles from zoo2.
SELECT age FROM zoo1
WHERE animal IN ('bear', 'bird')
UNION
SELECT age FROM zoo2
WHERE animal IN ('lion', 'crocodile')


Drag and drop from the options below to create a list of customers in the form "name is from city".
SELECT CONCAT (name, ' is from ', city)
FROM customers;
The zoo administration wants a list of animals whose age is greater than the average age of all of the animals.
SELECT * FROM zoo
WHERE age >
(SELECT AVG(age)
FROM zoo)


There are many wolves in the zoo: black wolf, white wolf, lucky wolf, little wolf. They all have 'wolf' at the end of their names. Print the ages of all of the wolves.
SELECT age FROM zoo
WHERE animal LIKE '%wolf'
